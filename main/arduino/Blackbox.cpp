#include "Arduino.h"
#include "Blackbox.h"
#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const uint8_t PROGMEM logo[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xf0, 0x60, 0x00, 0x38, 0x01, 0xfc, 0x30, 0x61, 0xfe, 0x00, 0xe0, 0x18, 0x30, 0x00, 
  0x00, 0x0f, 0xf8, 0x60, 0x00, 0x38, 0x01, 0xf8, 0x30, 0xe1, 0xff, 0x01, 0xf0, 0x18, 0x70, 0x00, 
  0x00, 0x0c, 0x38, 0x60, 0x00, 0x38, 0x03, 0x80, 0x33, 0xc1, 0x83, 0x81, 0xb0, 0x1c, 0x60, 0x00, 
  0x00, 0x0c, 0x18, 0x60, 0x00, 0x38, 0x03, 0x00, 0x37, 0x01, 0x83, 0x83, 0x18, 0x0c, 0xc0, 0x00, 
  0x00, 0x0c, 0x18, 0x60, 0x00, 0x7c, 0x07, 0x00, 0x3e, 0x01, 0x83, 0x83, 0x18, 0x07, 0xc0, 0x00, 
  0x00, 0x0c, 0x38, 0x60, 0x00, 0x6c, 0x06, 0x00, 0x3c, 0x01, 0xc3, 0x06, 0x0c, 0x07, 0x80, 0x00, 
  0x00, 0x0f, 0xf0, 0x60, 0x00, 0x6c, 0x0e, 0x00, 0x38, 0x01, 0xff, 0x06, 0x0c, 0x03, 0x80, 0x00, 
  0x00, 0x0f, 0xf0, 0x60, 0x00, 0xee, 0x0e, 0x00, 0x38, 0x01, 0xff, 0x06, 0x0c, 0x03, 0x80, 0x00, 
  0x00, 0x0c, 0x38, 0x60, 0x00, 0xc6, 0x06, 0x00, 0x3c, 0x01, 0x83, 0x07, 0x0c, 0x07, 0x80, 0x00, 
  0x00, 0x0c, 0x18, 0x60, 0x00, 0xfe, 0x07, 0x00, 0x3f, 0x01, 0x83, 0x83, 0x18, 0x06, 0xc0, 0x00, 
  0x00, 0x0c, 0x18, 0x60, 0x01, 0xfe, 0x03, 0x00, 0x33, 0x81, 0x83, 0x83, 0x98, 0x0c, 0xc0, 0x00, 
  0x00, 0x0c, 0x38, 0x60, 0x01, 0x87, 0x03, 0x80, 0x31, 0xc1, 0xc3, 0x01, 0xb0, 0x1c, 0x60, 0x00, 
  0x00, 0x0f, 0xf0, 0x7f, 0xc1, 0x83, 0x01, 0xf8, 0x30, 0xe1, 0xff, 0x01, 0xf0, 0x18, 0x70, 0x00, 
  0x00, 0x0f, 0xe0, 0x7f, 0xc1, 0x83, 0x00, 0xfc, 0x30, 0x61, 0xfe, 0x00, 0xe0, 0x18, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Blackbox::Blackbox(int dataOut, int dataIn, int statusPin) {  
  Serial.begin(9600);
  pinMode(dataOut, OUTPUT);
  pinMode(dataIn, INPUT);
  pinMode(statusPin, OUTPUT);
  _dataOut = dataOut;
  _dataIn = dataIn;
  _statusPin = statusPin;
  _connectionStatus = false;
  digitalWrite(_statusPin, HIGH);

  display = Adafruit_SSD1306(128, 64, &Wire, -1);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    for(;;); // Don't proceed, loop forever
  }

  // Display setup
  display.setRotation(2);
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  // Splash
  display.clearDisplay();
  display.drawBitmap(0, 0, logo, 128, 64, WHITE);
  display.display();

  WiFi.softAP("BLACKBOX", "blackbox");

  digitalWrite(_statusPin, LOW);
    
  delay(1000);   
}

void Blackbox::update() {
  // Every second without delaying
  if (millis() % 1000 == 0) {
    Blackbox::updateScreen();
  }
  if (millis() % 500 == 0 && !_connectionStatus) {
    int buffer[1024];
    Blackbox::ping();
    Blackbox::receive(buffer, 1024, 100);
  }
}

void Blackbox::updateScreen() {
  display.clearDisplay();

  display.drawBitmap(0, -24, logo, 128, 64, WHITE);
  // Display IP Address and connection status
  display.setCursor(0,24);
  display.print(F("IP: "));
  display.println(WiFi.softAPIP());
  display.print(F("Connected: "));
  display.println(_connectionStatus);
  display.display();
}


// Connection ping
void Blackbox::ping() {
  pulse(10);
}

void Blackbox::receive(int* buffer, int size, int timeout) {
  int lastMillis = millis();
  int startPulse = 0;
  int pulseTime = 0;
  int i = 0;
  for (;;) {
    // Timeout
    if (millis() - lastMillis >= timeout) {
      Serial.println("Timed out.");
      break;
    }
    // Pulse high (start)
    if (digitalRead(_dataIn)) {
      // Reset timeout
      lastMillis = millis();
      // Set start of pulse
      startPulse = millis();
    // If startPulse was already set and pin is LOW
    } else if (startPulse != 0 && !digitalRead(_dataIn)) {
      // Calculate pulse time
      pulseTime = millis() - startPulse;
      // Reset pulse start time
      startPulse = 0;

      if (pulseTime == 10) {
        buffer[i] = 0;
      } else if (pulseTime == 20) {
        buffer[i] = 1;
      }

      i++;
      if (i >= size - 1) {
        break;
      }
    }
  }
}

void Blackbox::pulse(int ms) {
  digitalWrite(_dataOut, HIGH);
  digitalWrite(_statusPin, HIGH);
  delay(ms);
  digitalWrite(_dataOut, LOW);
  digitalWrite(_statusPin, LOW);
  delay(10); // Off delay will always be 10ms
}